public class MergeSortDemo {
    static void  merge_sort(int[] arr, int start, int end)
    {
        if (end == start +1)
        {
            return;
        }
        else
        {
            int middle = (start + end) / 2;
            merge_sort(arr, start, middle);
            merge_sort(arr, middle, end);
            merge(arr, start, middle, end);
        }


    }

    static void merge(int[] arr, int start1, int middle1, int end1)
    {
        int i, j;
        int[] temp = new int[100000];
        int index = start1;

        for (i = start1, j = middle1; ((i < middle1) || (j <end1));)
        {
            if ((i < middle1) && (j < end1))
            {
                if (arr[j] > arr[i])
                {
                    temp[index] = arr[j];
                    j++;
                }
                else
                {
                    temp[index] = arr[i];
                    i++;
                }
            }
            else
            {
                if (i < middle1)
                {
                    temp[index] = arr[i];
                    i++;
                }
                else
                {
                    temp[index] = arr[j];
                    j++;
                }
            }
            index++;
        }
        for (int k = start1; k < end1; k++)
        {
            arr[k] = temp[k];
        }
    }

    public static void main(String[] args) {
        ArrayDemo ob1 = new ArrayDemo();
        for (int i = 0; i < 100000; i++)
        {
            ob1.tempArray[i] = i;
        }

        int len = ob1.tempArray.length;
        long start = System.currentTimeMillis();

        merge_sort(ob1.tempArray, 0, len);

        long end = System.currentTimeMillis();

        System.out.println("Counting takes " +
                (end - start) + "ms");


//        for (int i = 0; i < ob1.tempArray.length; i++)
//        {
//            System.out.println(ob1.tempArray[i]+ ",");
//        }
    }

}



class ArrayDemo {
    public int[] tempArray = new int[100000];
}

